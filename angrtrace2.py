import os
import angr
from angrutils import *

"""
Print out the path of execution for specific input cases
"""

# Create project
filepath = "binaryfiles/compare1.out"
project = angr.Project(filepath, load_options={"auto_load_libs": False})

# 指定具体的字符串值作为符号输入 Specify a specific string value as symbolic input
str_a = "aaa"
str_b = "acb"
str_a_symbal = claripy.BVV(str_a, 8 * len(str_a))
str_b_symbal = claripy.BVV(str_b, 8 * len(str_b))

# 调用compare1函数 Pass in symbolized variables: str_a and str_b
initial_state = project.factory.entry_state(args=[filepath, str_a, str_b])
simulation = project.factory.simgr(initial_state)

# 运行符号执行，直到找到目标状态（例如，循环结束） Run symbol execution
simulation.run()

# 获取循环执行经过的基本块的次数 Gets the number of base blocks through which the loop is executed
loop_iterations = simulation.stashes['deadended'][0].history.block_count

# 有几条执行路径 Print how many execution paths it has, it should be 1
print(len(simulation.stashes['deadended']))

# 打印所有经过的基本块的地址 Print the addresses of all passed base blocks
block_addr_list = list(simulation.stashes['deadended'][0].history.bbl_addrs)

for i in range(len(block_addr_list)):
    block_addr_list[i] = hex(block_addr_list[i])

print(block_addr_list)

print("Number of blocks passed:", loop_iterations)

# Print the CFG of this path
cfg = project.analyses.CFGEmulated(fail_fast=True, initial_state=initial_state)
plot_cfg(cfg, "cfg_1", asminst=True, remove_imports=True, remove_path_terminator=True)

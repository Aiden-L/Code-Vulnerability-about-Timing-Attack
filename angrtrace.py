import os
import angr
from angrutils import *
"""
Symbolic execution, str_a, str_b
"""

file_directory = "binaryfiles/"
file_name = "memcmp15.out"
filepath = file_directory + file_name

# Init angr project
project = angr.Project(filepath)

# Symbolize str_a and str_b
str_a_length = 10
str_b_length = 10
str_a = claripy.BVS("str_a", 8 * str_a_length)  # 每个字符8位
str_b = claripy.BVS("str_b", 8 * str_b_length)

# Pass in symbolized variables: str_a and str_b
initial_state = project.factory.entry_state(args=[filepath, str_a, str_b])

# Add a constraint to str_a so that none of its bytes is \x00
for i in range(str_a_length):
    initial_state.add_constraints(str_a.get_byte(i) != 0)

# Add a constraint to str_b so that none of its bytes is \x00
for i in range(str_b_length):
    initial_state.add_constraints(str_b.get_byte(i) != 0)

simulation = project.factory.simgr(initial_state)

# Run symbol execution
simulation.run()

# Find all simulation that comes to the end of the program
my_count = 0
passed_block_count_list = []

with open(f"logs/log_for_{file_name}.txt", "w") as f:
    for loop_iteration in simulation.stashes['deadended']:
        my_count += 1
        # Number of code blocks that the path passes through
        passed_block_count = loop_iteration.history.block_count
        f.write(f"Number {my_count} path, Number of code blocks passed: {passed_block_count}\n")
        # Gets the values of str_a and str_b used for this execution
        str_a_value = loop_iteration.solver.eval(str_a, cast_to=bytes)
        str_b_value = loop_iteration.solver.eval(str_b, cast_to=bytes)

        f.write(f"str_a value: {str_a_value}\n")
        f.write(f"str_b value: {str_b_value}\n")
        f.write("-------------------------\n")

        passed_block_count_list.append(passed_block_count)

    # print summary, if with all the inputs,
    # the path goes through the same number of code blocks, then it is time constant
    constant_flag = max(passed_block_count_list) - min(passed_block_count_list)

    passed_block_count_set_list = list(set(passed_block_count_list))

    if constant_flag < 3:
        f.write(f"For {len(passed_block_count_list)} paths tested, the number of code blocks can only be: ")
        f.write(str(passed_block_count_set_list))
        f.write("\nSummary: Time constant!\n")
    else:
        f.write(f"For {len(passed_block_count_list)} paths tested, the number of code blocks can be: ")
        f.write(str(passed_block_count_set_list))
        f.write("\nSummary: Time is not constant!\n")
